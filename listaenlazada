#ifndef LINKED_LIST_llist
#define LINKED_LIST_llist
#include <iostream>

using namespace std;
// Nodos de la lista:
template <typename T>
class llnode{
   public:
		// Esta clase es para ser usada por otras clases.
		// Por eficiencia los atributos se dejan publicos.
		T key;
		llnode<T> *prev, *next;
		//enum colors color;

		// Constructor por omision.
		llnode():key(NULL), next(this), prev(this){
		    //prev->next = NULL;
		    //next->prev = NULL;

		};

      // Inicializacion de los datos miembro.
		llnode (const T& k, llnode<T> *w = NULL, llnode<T> *y = NULL):key(k), prev(w), next(y) {};

		~llnode(){
           delete this->next;
           delete this->prev;

          
		}
};

// Lista enlazada con nodo centinela:
template <typename T>
class llist{
	public:
		llist(){
		    llnode<T> *nuevoN;
            nuevoN = new (llnode<T>);
            nil = nuevoN;
		   // nil->next = nil;
		   // this->getNil()->prev= nil;
		   // this->getNil()->key = NULL;
		    //nil->next = nil;
		    //nil->prev = nil;
		    //nil->key = NULL;
		};
			// Constructor (crea una lista vacia)

		llist(const llist<T>& obj){
		    *this = obj;
		};
			// Constructor copia

		~llist(){
            llnode<T> *p, *s;
            p = this->getNil();
            p = p->next;
            while(p->next != this->getNil()){
                s = p->next;
                delete(p);
                p=s;
            }
            delete(this->getNil());
		};
			// Destructor (borra la lista)

		llnode<T>* listSearch(const T& k){
		    llnode<T> *p = this->getNil()->next;
		    while(p != this->getNil() && p->key != k){
                p = p->next;
		    }
		    if (p == this->getNil()){
                llnode<T> *nulo = nullptr;
                //cout<<"no se encontrÃ³"<<endl;
                return nulo;
		    }
                return p;
		};
			// Busca la llave iterativamente. Si la encuentra, devuelve un
            // apuntador al nodo que la contiene; sino devuelve NULL.

		void listInsert(llnode<T>* x){

		    x->next = this->getNil()->next;
            this->getNil()->next->prev = x;
		    this->getNil()->next = x;
		    x->prev = this->getNil();
		    std::cout<<"valor insertado: "<< this->getNil()->next->key <<endl;


		};
			// Inserta el nodo x en la lista.


		llnode<T>* listDelete(llnode<T>* x){
		    x->prev->next = x->next;
		    x->next->prev = x->prev;
		    return x;
		};
			// Saca de la lista la llave contenida en el nodo apuntado por x.
			// Devuelve la direccion del nodo eliminado para que se pueda
			// disponer de el.

		llnode<T> * getNil(){
			return this->nil;
		};
		// Devuelve el nodo centinela. (Para efectos de revision de la tarea).



		private:

		llnode<T> *nil;	    // nodo centinela


};

#endif	// LINKED_LIST_llist
