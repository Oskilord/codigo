#ifndef BINARY_SEARCH_Tree
#define BINARY_SEARCH_Tree
#include <iostream>
#include <stack>
using namespace std;
// Nodos del arbol:
template <typename T>
class node{
   public:
		// Esta clase es usada por otras clases.
		// Para mayor eficiencia, los atributos se hacen publicos.
		T key;
		node<T> *p, *left, *right;

		// Constructor por omision
		node():key(NULL), left(this), right(this), p(this){
		};

		// Constructor por copia. Copia el nodo y sus hijos.
		node(const node<T> * obj, node<T> * padre){
		}

        // Inicializacion de datos miembro
		node(const T& k, node<T> *w = nullptr, node<T> *y = nullptr, node<T> *z = nullptr):key(k), p(w), left(y), right(z){};

		~node(){
		    delete this->left;
		    delete this->right;
		   // delete this->p;
		}
};

// Arbol:
template <typename T>
class tree{
	public:
		tree(){
		    //node<T> *nuevoN;
            //nuevoN = new (node<T>);
            //root = nuevoN;
            //root->left = nullptr;
            //root->right = nullptr;
           // root->p = nullptr;
           // root->key = NULL;
          root = nullptr;
		};
			// Constructor. Crea un arbol vacio

		tree(const tree<T>& obj){
		    *this = obj;
		};
			// Constructor copia

		~tree(){
		    delete this->getRoot(); // elimina lo demás recursivamente
		};
			// Destructor (borra el arbol)

		void inorderTreeWalk(node<T>* x, stack<T> & pila){
		    if(x != nullptr){
                inorderTreeWalk(x->left, pila);
                int i = x->key;
                pila.push(i);
                cout<<"Llave: "<<x->key<<endl;
                inorderTreeWalk(x->right, pila);
		    }
		};

            // Efectua un recorrido en orden del sub‡rbol cuya raiz es apuntada
            // por x, guardando en cada visita la llave de cada nodo en la pila.
            // Es decir, cada vez que se llega a un nodo se hace
            // pila.push(x->key). Si se hace correctamente, al finalizar el
            // metodo la pila debe contener las llaves de los nodos del
            // subarbol ordenadas de mayor a menor.


		node<T>* treeSearch(const T& k){
		    return treeSearchAux(this->getRoot(),k);

		};
			// Busca la llave recursivamente; si la encuentra, devuelve un
            // apuntador al nodo que la contiene, sino devuelve NULL

		node<T>* iterativeTreeSearch(const T& k){
		    node<T> *nodo = this->getRoot();
		    while(nodo != nullptr && k != nodo->key){
                if(k < nodo->key){
                    nodo = nodo->left;
                }
                else{
                    nodo = nodo->right;
                }
		    }
		    return nodo;
		};
			// Lo mismo que en el anterior pero usando un procedimiento
			// iterativo

		node<T>* treeMinimum(){
		    node<T> *nodo = this->getRoot();
		    return treeMinimumAux(nodo);
		};
			// Devuelve el nodo que tiene la llave menor.
            // Si el arbol est‡ vacio devuelve NULL.

		node<T>* treeMaximum(){
            node<T> *nodo = this->getRoot();
		    while (nodo->right != nullptr){
                nodo = nodo->right;
		    }
		    return nodo;
		};
			// Devuelve el nodo que tiene la llave mayor.
            // Si el arbol esta vacio devuelve NULL.

		node<T>* treeSuccessor(const node<T>* x){
		    if(x->right != nullptr){
                return treeMinimum(x->right);
		    }
		    node<T> *y = x->p;
		    while( y =! NULL && x == y->right){
                x = y;
                y = y->p;
		    }
		    return y;
		};
			// Devuelve el nodo cuya llave es la que le sigue a la
            // del nodo x. Si no existe tal nodo devuelve NULL.

		void treeInsert(node<T>* z){
                node<T> *a, *b;
                a = nullptr;
                b = this->getRoot();
                while(b!= NULL){
                    a = b;
                    if(z->key < b->key){
                        b = b->left;
                    }
                    else{
                        b = b->right;
                    }
                }
                z->p = a;
                if (a == nullptr){
                    root = z;
                    //this->getRoot() = z;
                }
                else if(z->key < a->key){
                    a->left = z;
                }
                else{
                    a->right = z;
                }

		};
		// Inserta el nodo z en la posicion que le corresponde en el arbol.


		node<T>* treeDelete(node<T>* z){
		    if(z->left == nullptr){
                transplant(z,z->right);
		    }
		    else if(z->right == nullptr){
                transplant(z,z->left);
		    }
		    else{
                node<T> *y;
                y = treeMinimum();
                if(y->p != z){
                    transplant(y,y->right);
                    y->right = z->right;
                    y->right->p = y;
                }
                transplant(z,y);
                y->left = z->left;
                y->left->p = y;
		    }
		};
			// Saca del arbol la llave contenida en el nodo apuntado por z.
			// Devuelve la direccion del nodo eliminado para que se pueda
			// disponer de ella.

		node<T> * getRoot(){
			return this->root;
		};
		// Devuelve la raiz del arbol. (Para efectos de revisi—n de la tarea).



	private:
		node<T> *root;	// root of the Tree

        node<T>* treeSearchAux(node<T>* x, const T& k){
		    if(x == nullptr || x->key == k){
                return x;
		    }
		    if(k < x->key){
                return treeSearchAux(x->left,k);
		    }
		    else{
                return treeSearchAux(x->right,k);
		    }

		};

		node<T>* treeMinimumAux(node<T> *nodo){
		    while (nodo->left != nullptr){
                nodo = nodo->left;
		    }
		    return nodo;
		};

		void transplant(node<T>* u, node<T>* v ){
            if (u->p == nullptr){
                root = v;
            }
            else if(u == u->p->left){
                u->p->left = v;
            }
            else{
                u->p->right = v;
            }
            if(v != nullptr){
                v->p = u->p;
            }
		}



};
#endif	// BINARY_SEARCH_Tree
